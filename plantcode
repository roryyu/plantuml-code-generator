#!/usr/bin/env node

var fs = require("fs");
var hbs = require("handlebars");
var parser = require("./src/plantuml");
var plantumlify = require("./src/plantumlify");
var os = require("os");

var options = {
  language: "coffeescript",
  output: null
};
var PrefixSuffixDivide = {
  'json': {
    prefix: '[',
    suffix: ']',
    devide: ','
  }
}

var supported_languages = ["coffeescript", "csharp", "ecmascript5", "ecmascript6", "java", "php", "python", "ruby", "typescript", "swift", "kotlin", "json", "puml"];

var args = process.argv.slice(2); // Trim "node" and the script path.

hbs.registerHelper('if_ne', function (a, b, opts) {
  if (a() != b) {
    return opts.fn(this);
  } else {
    return opts.inverse(this);
  }
});

// sReturnType Check
hbs.registerHelper('if_ne2', function (a, b, opts) {
  if (a["sReturnType"] != b) {
    return opts.fn(this);
  } else {
    return opts.inverse(this);
  }
});

if (args.length === 0) {
  printUsage();
} else {
  convertFile(getArguments());
}

function printLanguages() {
  supported_languages.forEach(function (item) {
    console.log(item);
  })
  exitSuccess();
}

function printUsage() {
  console.log("Usage: plantcode [options] <inputFile>");
  console.log("");
  console.log("Generates classfile(s) for the provided PlantUML file specified by <input_file> and writes to standard output.");
  console.log("");
  console.log("Options:");
  console.log("  -l, --language <language>          name of the programming language");
  console.log("                                     which the produced class files")
  console.log("                                     will be written in");
  console.log("  -o, --out <output_path>            the path to output the file(s) to");
  console.log("      --show-languages               displays all the current supported");
  console.log("                                     programming languages for use")
  console.log("                                     for with the language option");
  console.log("  -h, --help                        print help and exit");
  exitSuccess();
}

function isValidLanguage(language) {
  return supported_languages.indexOf(language) !== -1;
}

function getArguments() {

  while (args.length > 0 && isOption(args[0])) {
    switch (args[0]) {
      case "-o":
      case "--out":
        nextArg();
        if (args.length === 0) {
          abort("Missing output directory or file for -o/--out option.");
        }
        options.output = args[0];
        break;
      case "-l":
      case "--language":
        nextArg();
        if (args.length === 0) {
          abort("Missing language of the -l/--language option.");
        } else if (!isValidLanguage(args[0])) {
          abort("Invalid language provided.");
        }
        options.language = args[0];
        break;
      case "--show-languages":
        printLanguages();
        break;
      case "-h":
      case "--help":
        printUsage();
        break;
      default:
        abort("Invalid option " + args[0]);
        break;
    }
    nextArg();
  }

  switch (args.length) {
    case 1:
      options.input = args[0];
      break;
    default:
      abort("No input file provided.");
  }

  return options;

}

function convertFile(config) {

  fs.readFile(config.input, { encoding: "UTF-8" }, function (err, data) {
    if (err === null) {
      processInputFile(config, data);
    } else {
      console.error("Unable to read input file.");
    }
  });

}

function exitFailure() {
  process.exit(1);
}

function exitSuccess() {
  process.exit(0);
}

function abort(message) {
  for (var i = 0, length = arguments.length; i < length; i++) {
    console.error(arguments[i]);
  }
  exitFailure();
}

function isOption(arg) {
  return (/^-/).test(arg);
}

function nextArg() {
  args.shift();
}

function processInputFile(config, dataSource) {
  fs.readFile("templates/" + config.language + ".hbs", { encoding: "UTF-8" }, function (err, data) {
    if (err === null) {
      if (config.language === 'puml') {
        processTemplateFilePuml(config, data, dataSource)
      } else {
        try {
          var aUMLBlocks = parser.parse(dataSource);
        } catch (e) {
          abort("Error parsing input file: ", config.input, e);
        }
        processTemplateFile(config, data, aUMLBlocks);
      }
    } else {
      abort("Unable to read template file for " + config.language + ".");
    }
  });
}
function processTemplateFilePuml(config, templateData, dataSource) {
  var output = '';
  var template = hbs.compile(templateData);
  output = plantumlify(dataSource, [], template)
  if (config.output === null) {
    console.log(output);
  } else {
    fs.writeFile(config.output, output, function (err) {
      if (err !== null) {
        abort("Unable to write output file for " + config.output + ".");
      }
    })
  }
}
function processTemplateFile(config, templateData, dictionary) {
  var output = "";
  var { prefix, suffix, devide } = PrefixSuffixDivide[config.language] ? PrefixSuffixDivide[config.language] : { prefix: '', suffix: '', devide: '' };
  output += prefix;
  var template = hbs.compile(templateData);
  dictionary.forEach(function (element) {
    var clses = element.getClasses()
    clses.forEach(function (element, index) {
      output += template(element, {
        allowedProtoMethods: {
          "getExtends": true,
          "getFields": true,
          "getFullName": true,
          "getKeyword": true,
          "getMethods": true,
          "getName": true,
          "getParameters": true,
          "getReturnType": true,
          "hasFields": true,
          "hasMethods": true,
          "isPrivate": true,
          "isProtected": true,
          "isPublic": true,
          "needsReturnStatement": true,
          "getFullJson": true
        }
      }) + ((index < clses.length - 1) ? devide : '') + os.EOL + os.EOL;
    })
  })
  output += suffix;


  if (config.output === null) {
    console.log(output);
  } else {
    fs.writeFile(config.output, output, function (err) {
      if (err !== null) {
        abort("Unable to write output file for " + config.output + ".");
      }
    })
  }

}

// Workaround for an apparent bug in Handlebars: functions are not called with the parent scope
// as context.
//
// Here the getFullName is found in the parent scope (Class), but it is called with the current
// scope (Field) as context:
//
// {{#each getFields}}
//   {{../getFullName}}
// {{/each}}
//
// The following helper works around it:
//
// {{#each getFields}}
//   {{#call ../this ../getFullName}}
// {{/each}}
hbs.registerHelper('call', function (context, member, options) {
  return member.call(context);
});

exports.convertFile = convertFile;
